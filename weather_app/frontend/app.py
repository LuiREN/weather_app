import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import datetime
import json
from typing import List, Dict, Any

# URL –±—ç–∫–µ–Ω–¥–∞
BACKEND_URL = "http://backend:8000"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
    page_icon="üå§Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API

def get_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ API."""
    try:
        response = requests.get(f"{BACKEND_URL}/cities")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return []

def scrape_weather_data(city):
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."""
    try:
        response = requests.post(f"{BACKEND_URL}/scrape?city={city}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return None

def get_weather_data(city=None, days=7):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏–∑ API."""
    try:
        url = f"{BACKEND_URL}/weather"
        params = {"days": days}
        if city:
            params["city"] = city
        
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return []

def train_model(city):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã."""
    try:
        response = requests.post(f"{BACKEND_URL}/train_model?city={city}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return None

def get_forecast(city, days=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."""
    try:
        response = requests.get(f"{BACKEND_URL}/forecast?city={city}&days={days}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

def plot_temperature(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    fig = px.line(
        df, 
        x='date', 
        y='temperature', 
        title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        labels={"date": "–î–∞—Ç–∞", "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)"},
        markers=True
    )
    fig.update_layout(height=400)
    return fig

def plot_humidity(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    fig = px.line(
        df, 
        x='date', 
        y='humidity', 
        title="–í–ª–∞–∂–Ω–æ—Å—Ç—å",
        labels={"date": "–î–∞—Ç–∞", "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)"},
        markers=True
    )
    fig.update_layout(height=400)
    return fig

def plot_precipitation(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Å–∞–¥–∫–æ–≤."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    fig = px.bar(
        df, 
        x='date', 
        y='precipitation', 
        title="–û—Å–∞–¥–∫–∏",
        labels={"date": "–î–∞—Ç–∞", "precipitation": "–û—Å–∞–¥–∫–∏ (–º–º)"},
        color='precipitation',
        color_continuous_scale='blues'
    )
    fig.update_layout(height=400)
    return fig

def plot_weather_conditions(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–≥–æ–¥—ã."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–≥–æ–¥—ã –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    condition_map = {
        "–Ø—Å–Ω–æ": 1,
        "–û–±–ª–∞—á–Ω–æ": 2,
        "–ü–∞—Å–º—É—Ä–Ω–æ": 3,
        "–¢—É–º–∞–Ω": 4,
        "–î–æ–∂–¥—å": 5,
        "–ì—Ä–æ–∑–∞": 6
    }
    
    df['condition_code'] = df['weather_condition'].map(condition_map)
    
    fig = px.scatter(
        df, 
        x='date', 
        y='condition_code', 
        title="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã",
        labels={"date": "–î–∞—Ç–∞", "condition_code": "–°–æ—Å—Ç–æ—è–Ω–∏–µ"},
        color='weather_condition',
        symbol='weather_condition',
        size=[10] * len(df),
        category_orders={"condition_code": list(condition_map.values())}
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å Y –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–∫
    fig.update_layout(
        height=400,
        yaxis=dict(
            tickmode='array',
            tickvals=list(condition_map.values()),
            ticktext=list(condition_map.keys())
        )
    )
    
    return fig

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

def main():
    st.title("üå§Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        st.subheader("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        city_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", "–ú–æ—Å–∫–≤–∞")
        
        if st.button("–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"):
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                result = scrape_weather_data(city_input)
                if result and result.get("success"):
                    st.success(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {result.get('data_points')} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {result.get('city')}")
        
        # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        cities = get_cities()
        if cities:
            selected_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cities)
            days_to_show = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 1, 30, 7)
        else:
            st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            selected_city = None
            days_to_show = 7
            
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if selected_city:
            if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
                with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                    result = train_model(selected_city)
                    if result and result.get("success"):
                        st.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {result.get('city')}")
                        st.write("–ú–µ—Ç—Ä–∏–∫–∏:")
                        metrics = result.get("metrics", {})
                        st.metric("RMSE —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{metrics.get('temp_rmse', 0):.2f} ¬∞C")
                        st.metric("RMSE –≤–ª–∞–∂–Ω–æ—Å—Ç–∏", f"{metrics.get('humidity_rmse', 0):.2f} %")
                        st.metric("RMSE –æ—Å–∞–¥–∫–æ–≤", f"{metrics.get('precip_rmse', 0):.2f} –º–º")
        
            forecast_days = st.slider("–î–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", 1, 10, 5)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "–ü—Ä–æ–≥–Ω–æ–∑"])
    
    with tab1:
        if selected_city:
            st.header(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {selected_city}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            weather_data = get_weather_data(selected_city, days_to_show)
            
            if weather_data:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                df = pd.DataFrame(weather_data)
                df['date'] = pd.to_datetime(df['date']).dt.date
                df = df.sort_values('date', ascending=False)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.subheader("–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(
                    df[['date', 'temperature', 'humidity', 'pressure', 'wind_speed', 'precipitation', 'weather_condition']],
                    column_config={
                        "date": "–î–∞—Ç–∞",
                        "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
                        "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)",
                        "pressure": "–î–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞)",
                        "wind_speed": "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)",
                        "precipitation": "–û—Å–∞–¥–∫–∏ (–º–º)",
                        "weather_condition": "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
                    },
                    hide_index=True
                )
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    temp_fig = plot_temperature(weather_data)
                    if temp_fig:
                        st.plotly_chart(temp_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤
                    precip_fig = plot_precipitation(weather_data)
                    if precip_fig:
                        st.plotly_chart(precip_fig, use_container_width=True)
                
                with col2:
                    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    humidity_fig = plot_humidity(weather_data)
                    if humidity_fig:
                        st.plotly_chart(humidity_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                    conditions_fig = plot_weather_conditions(weather_data)
                    if conditions_fig:
                        st.plotly_chart(conditions_fig, use_container_width=True)
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                    data=df.to_csv(index=False).encode('utf-8'),
                    file_name=f'weather_data_{selected_city}_{datetime.date.today()}.csv',
                    mime='text/csv',
                )
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        else:
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
    
    with tab2:
        if selected_city:
            st.header(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {selected_city}")
            
            forecast_data = get_forecast(selected_city, forecast_days)
            
            if forecast_data:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                df_forecast = pd.DataFrame(forecast_data)
                df_forecast['date'] = pd.to_datetime(df_forecast['date']).dt.date
                df_forecast = df_forecast.sort_values('date')
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                st.dataframe(
                    df_forecast[['date', 'temperature', 'humidity', 'precipitation', 'weather_condition']],
                    column_config={
                        "date": "–î–∞—Ç–∞",
                        "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
                        "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)",
                        "precipitation": "–û—Å–∞–¥–∫–∏ (–º–º)",
                        "weather_condition": "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
                    },
                    hide_index=True
                )
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    forecast_temp_fig = plot_temperature(forecast_data)
                    if forecast_temp_fig:
                        st.plotly_chart(forecast_temp_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤
                    forecast_precip_fig = plot_precipitation(forecast_data)
                    if forecast_precip_fig:
                        st.plotly_chart(forecast_precip_fig, use_container_width=True)
                
                with col2:
                    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    forecast_humidity_fig = plot_humidity(forecast_data)
                    if forecast_humidity_fig:
                        st.plotly_chart(forecast_humidity_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                    forecast_conditions_fig = plot_weather_conditions(forecast_data)
                    if forecast_conditions_fig:
                        st.plotly_chart(forecast_conditions_fig, use_container_width=True)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("–°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                cols = st.columns(min(5, len(forecast_data)))
                
                for i, (_, row) in enumerate(df_forecast.iterrows()):
                    if i < len(cols):
                        with cols[i]:
                            st.metric(
                                f"{row['date'].strftime('%d.%m')}",
                                f"{row['temperature']:.1f} ¬∞C",
                                f"{row['weather_condition']}"
                            )
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≥–æ–¥—ã
                            weather_icons = {
                                "–Ø—Å–Ω–æ": "‚òÄÔ∏è",
                                "–û–±–ª–∞—á–Ω–æ": "üå§Ô∏è",
                                "–ü–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
                                "–¢—É–º–∞–Ω": "üå´Ô∏è",
                                "–î–æ–∂–¥—å": "üåßÔ∏è",
                                "–ì—Ä–æ–∑–∞": "‚õàÔ∏è"
                            }
                            
                            st.markdown(f"<h1 style='text-align: center;'>{weather_icons.get(row['weather_condition'], '‚ùì')}</h1>", unsafe_allow_html=True)
                            st.write(f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {row['humidity']:.1f}%")
                            st.write(f"–û—Å–∞–¥–∫–∏: {row['precipitation']:.1f} –º–º")
            else:
                st.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        else:
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    with st.expander("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"):
        st.write("""
        ### –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
        
        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ 
        –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
        
        **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
        - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã
        
        –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
        - FastAPI –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
        - Streamlit –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        - SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        - Scikit-learn –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        """)

if __name__ == "__main__":
    main()
