import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import datetime
import json
from typing import List, Dict, Any, Optional

# URL –±—ç–∫–µ–Ω–¥–∞
BACKEND_URL = "http://backend:8000"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
    page_icon="üå§Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

def plot_temperature(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    fig = px.line(
        df, 
        x='date', 
        y='temperature', 
        title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        labels={"date": "–î–∞—Ç–∞", "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)"},
        markers=True
    )
    fig.update_layout(height=400)
    return fig

def plot_humidity(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    fig = px.line(
        df, 
        x='date', 
        y='humidity', 
        title="–í–ª–∞–∂–Ω–æ—Å—Ç—å",
        labels={"date": "–î–∞—Ç–∞", "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)"},
        markers=True
    )
    fig.update_layout(height=400)
    return fig

def plot_precipitation(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Å–∞–¥–∫–æ–≤."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    fig = px.bar(
        df, 
        x='date', 
        y='precipitation', 
        title="–û—Å–∞–¥–∫–∏",
        labels={"date": "–î–∞—Ç–∞", "precipitation": "–û—Å–∞–¥–∫–∏ (–º–º)"},
        color='precipitation',
        color_continuous_scale='blues'
    )
    fig.update_layout(height=400)
    return fig

def plot_weather_conditions(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–≥–æ–¥—ã."""
    if not data:
        return None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–≥–æ–¥—ã –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    condition_map = {
        "–Ø—Å–Ω–æ": 1,
        "–û–±–ª–∞—á–Ω–æ": 2,
        "–ü–∞—Å–º—É—Ä–Ω–æ": 3,
        "–¢—É–º–∞–Ω": 4,
        "–î–æ–∂–¥—å": 5,
        "–ì—Ä–æ–∑–∞": 6,
        "–°–Ω–µ–≥": 7,
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": 0
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –≤ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã
    df['condition_code'] = df['weather_condition'].map(lambda x: condition_map.get(x, 0))
    
    fig = px.scatter(
        df, 
        x='date', 
        y='condition_code', 
        title="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã",
        labels={"date": "–î–∞—Ç–∞", "condition_code": "–°–æ—Å—Ç–æ—è–Ω–∏–µ"},
        color='weather_condition',
        symbol='weather_condition',
        size=[10] * len(df),
        category_orders={"condition_code": list(condition_map.values())}
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å Y –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–∫
    fig.update_layout(
        height=400,
        yaxis=dict(
            tickmode='array',
            tickvals=list(condition_map.values()),
            ticktext=list(condition_map.keys())
        )
    )
    
    return fig

def plot_model_metrics(metrics):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏."""
    if not metrics:
        return None
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    metrics_df = pd.DataFrame({
        '–ú–µ—Ç—Ä–∏–∫–∞': ['RMSE —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', 'MAE —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', 'RMSE –≤–ª–∞–∂–Ω–æ—Å—Ç–∏', 'MAE –≤–ª–∞–∂–Ω–æ—Å—Ç–∏', 'RMSE –æ—Å–∞–¥–∫–æ–≤', 'MAE –æ—Å–∞–¥–∫–æ–≤'],
        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
            metrics.get('temp_rmse', 0), 
            metrics.get('temp_mae', 0),
            metrics.get('humidity_rmse', 0), 
            metrics.get('humidity_mae', 0),
            metrics.get('precip_rmse', 0), 
            metrics.get('precip_mae', 0)
        ],
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–û—Å–∞–¥–∫–∏', '–û—Å–∞–¥–∫–∏']
    })
    
    fig = px.bar(
        metrics_df,
        x='–ú–µ—Ç—Ä–∏–∫–∞',
        y='–ó–Ω–∞—á–µ–Ω–∏–µ',
        color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        title="–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏",
        barmode='group'
    )
    
    fig.update_layout(height=400)
    return fig

def plot_data_availability(city, start_date, end_date):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        response = requests.get(
            f"{BACKEND_URL}/data_availability",
            params={
                "city": city,
                "start_date": start_date.isoformat(),
                "end_date": end_date.isoformat()
            }
        )
        
        if response.status_code != 200:
            return None
            
        data = response.json()
        
        if not data or not data.get("existing_dates"):
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ
        all_dates = []
        current_date = start_date
        while current_date <= end_date:
            all_dates.append(current_date)
            current_date += datetime.timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        existing_dates = [datetime.datetime.fromisoformat(d).date() for d in data.get("existing_dates", [])]
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame({
            'date': all_dates,
            'available': [1 if d in existing_dates else 0 for d in all_dates]
        })
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig = px.bar(
            df,
            x='date',
            y='available',
            title="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
            labels={"date": "–î–∞—Ç–∞", "available": "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"},
            color='available',
            color_discrete_map={0: 'red', 1: 'green'}
        )
        
        fig.update_layout(
            height=200,
            yaxis=dict(
                tickmode='array',
                tickvals=[0, 1],
                ticktext=['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ']
            )
        )
        
        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API

def get_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ API."""
    try:
        response = requests.get(f"{BACKEND_URL}/cities")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return []

def scrape_weather_data(city, start_date=None, end_date=None):
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."""
    try:
        url = f"{BACKEND_URL}/scrape"
        params = {
            "city": city,
            "disable_limit": True
        }
        
        if start_date:
            params["start_date"] = start_date.isoformat()
        if end_date:
            params["end_date"] = end_date.isoformat()
            
        response = requests.post(url, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return None

def get_weather_data(city: Optional[str] = None, days: int = 7):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏–∑ API."""
    try:
        url = f"{BACKEND_URL}/weather"
        params = {"days": days}
        if city:
            params["city"] = city
        
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return []

def train_model(city):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã."""
    try:
        response = requests.post(f"{BACKEND_URL}/train_model?city={city}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return None

def get_forecast(city, days=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."""
    try:
        response = requests.get(f"{BACKEND_URL}/forecast?city={city}&days={days}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return []

def get_scraping_logs(city=None, limit=10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞."""
    try:
        url = f"{BACKEND_URL}/scraping_logs"
        params = {"limit": limit}
        if city:
            params["city"] = city
            
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return []

def get_data_availability(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        response = requests.get(f"{BACKEND_URL}/data_availability?city={city}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {response.text}")
            return {"available": False}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
        return {"available": False}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
def city_autocomplete(input_text, cities_list):
    """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞."""
    if not input_text:
        return []
    
    input_text = input_text.lower()
    return [city for city in cities_list if input_text in city.lower()]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def main():
    st.title("üå§Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    all_cities = get_cities()
    popular_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–¢–≤–µ—Ä—å", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–°–æ—á–∏", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ú—É—Ä–º–∞–Ω—Å–∫"]
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if not all_cities:
        cities_for_autocomplete = popular_cities
    else:
        cities_for_autocomplete = list(set(all_cities + popular_cities))
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        st.subheader("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        city_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", "–ú–æ—Å–∫–≤–∞", key="city_input")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        suggestions = city_autocomplete(city_input, cities_for_autocomplete)
        if suggestions and city_input and city_input.lower() != suggestions[0].lower():
            selected_suggestion = st.selectbox(
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", 
                suggestions,
                key="city_suggestions"
            )
            if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ"):
                city_input = selected_suggestion
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ text_input —á–µ—Ä–µ–∑ session_state
                st.session_state['city_input'] = selected_suggestion
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –¥–∞—Ç
        st.subheader("–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input(
                "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", 
                datetime.date.today() - datetime.timedelta(days=9),
                max_value=datetime.date.today()
            )
        with col2:
            end_date = st.date_input(
                "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", 
                datetime.date.today(),
                max_value=datetime.date.today()
            )
        
        scrape_button = st.button("–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
        
        if scrape_button:
            if start_date > end_date:
                st.error("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã")
            else:
                # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                days_diff = (end_date - start_date).days + 1
                if days_diff > 30:
                    st.warning(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ ({days_diff} –¥–Ω–µ–π) –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.")
                
                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ..."):
                    st.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_input} –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
                    
                    # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if days_diff > 100:
                        st.info("–î–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ø–æ—Ä—Ü–∏—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.")
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä disable_limit=True –Ω–∞ –±—ç–∫–µ–Ω–¥
                    result = scrape_weather_data(city_input, start_date, end_date)
                    
                    if result and result.get("success"):
                        st.success(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {result.get('data_points')} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {result.get('city')}")
                    elif result:
                        st.warning(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥.")
        
        # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        
        if all_cities:
            selected_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", all_cities, key="selected_city")
            days_to_show = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 1, 30, 7)
        else:
            st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            selected_city = None
            days_to_show = 7
            
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if selected_city:
            if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
                with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                    result = train_model(selected_city)
                    if result and result.get("success"):
                        st.session_state['last_training_metrics'] = result.get("metrics", {})
                        st.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {result.get('city')}")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –≤–∏–¥–µ —á–∏—Å–µ–ª
                        metrics = result.get("metrics", {})
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("RMSE —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{metrics.get('temp_rmse', 0):.2f} ¬∞C")
                            st.metric("RMSE –≤–ª–∞–∂–Ω–æ—Å—Ç–∏", f"{metrics.get('humidity_rmse', 0):.2f} %")
                            st.metric("RMSE –æ—Å–∞–¥–∫–æ–≤", f"{metrics.get('precip_rmse', 0):.2f} –º–º")
                        with col2:
                            st.metric("MAE —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", f"{metrics.get('temp_mae', 0):.2f} ¬∞C")
                            st.metric("MAE –≤–ª–∞–∂–Ω–æ—Å—Ç–∏", f"{metrics.get('humidity_mae', 0):.2f} %")
                            st.metric("MAE –æ—Å–∞–¥–∫–æ–≤", f"{metrics.get('precip_mae', 0):.2f} –º–º")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å–æ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 5 –¥–Ω–µ–π).")
            
            forecast_days = st.slider("–î–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", 1, 10, 5)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "–ü—Ä–æ–≥–Ω–æ–∑", "–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏", "–ñ—É—Ä–Ω–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"])
    
    with tab1:
        if selected_city:
            st.header(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {selected_city}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            weather_data = get_weather_data(selected_city, days_to_show)
            
            if weather_data:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                df = pd.DataFrame(weather_data)
                df['date'] = pd.to_datetime(df['date']).dt.date
                df = df.sort_values('date', ascending=False)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.subheader("–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(
                    df[['date', 'temperature', 'humidity', 'pressure', 'wind_speed', 'precipitation', 'weather_condition']],
                    column_config={
                        "date": "–î–∞—Ç–∞",
                        "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
                        "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)",
                        "pressure": "–î–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞)",
                        "wind_speed": "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)",
                        "precipitation": "–û—Å–∞–¥–∫–∏ (–º–º)",
                        "weather_condition": "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
                    },
                    hide_index=True
                )
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    temp_fig = plot_temperature(weather_data)
                    if temp_fig:
                        st.plotly_chart(temp_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤
                    precip_fig = plot_precipitation(weather_data)
                    if precip_fig:
                        st.plotly_chart(precip_fig, use_container_width=True)
                
                with col2:
                    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    humidity_fig = plot_humidity(weather_data)
                    if humidity_fig:
                        st.plotly_chart(humidity_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                    conditions_fig = plot_weather_conditions(weather_data)
                    if conditions_fig:
                        st.plotly_chart(conditions_fig, use_container_width=True)
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                    data=df.to_csv(index=False).encode('utf-8'),
                    file_name=f'weather_data_{selected_city}_{datetime.date.today()}.csv',
                    mime='text/csv',
                )
                
                # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—ã –Ω–∞ –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                month_ago = datetime.date.today() - datetime.timedelta(days=30)
                availability_fig = plot_data_availability(selected_city, month_ago, datetime.date.today())
                if availability_fig:
                    st.plotly_chart(availability_fig, use_container_width=True)
                    st.info("–ó–µ–ª–µ–Ω—ã–º –æ—Ç–º–µ—á–µ–Ω—ã –¥–∞—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ö—Ä–∞—Å–Ω—ã–º - –¥–∞—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö.")
                else:
                    st.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        else:
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

    # –í–∫–ª–∞–¥–∫–∞ –ü—Ä–æ–≥–Ω–æ–∑
    with tab2:
        if selected_city:
            st.header(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {selected_city}")
            
            forecast_data = get_forecast(selected_city, forecast_days)
            
            if forecast_data:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                df_forecast = pd.DataFrame(forecast_data)
                df_forecast['date'] = pd.to_datetime(df_forecast['date']).dt.date
                df_forecast = df_forecast.sort_values('date')
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                st.dataframe(
                    df_forecast[['date', 'temperature', 'humidity', 'precipitation', 'weather_condition']],
                    column_config={
                        "date": "–î–∞—Ç–∞",
                        "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
                        "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)",
                        "precipitation": "–û—Å–∞–¥–∫–∏ (–º–º)",
                        "weather_condition": "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
                    },
                    hide_index=True
                )
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    forecast_temp_fig = plot_temperature(forecast_data)
                    if forecast_temp_fig:
                        st.plotly_chart(forecast_temp_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤
                    forecast_precip_fig = plot_precipitation(forecast_data)
                    if forecast_precip_fig:
                        st.plotly_chart(forecast_precip_fig, use_container_width=True)
                
                with col2:
                    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    forecast_humidity_fig = plot_humidity(forecast_data)
                    if forecast_humidity_fig:
                        st.plotly_chart(forecast_humidity_fig, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                    forecast_conditions_fig = plot_weather_conditions(forecast_data)
                    if forecast_conditions_fig:
                        st.plotly_chart(forecast_conditions_fig, use_container_width=True)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("–°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                cols = st.columns(min(5, len(forecast_data)))
                
                for i, (_, row) in enumerate(df_forecast.iterrows()):
                    if i < len(cols):
                        with cols[i]:
                            st.metric(
                                f"{row['date'].strftime('%d.%m')}",
                                f"{row['temperature']:.1f} ¬∞C",
                                f"{row['weather_condition']}"
                            )
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≥–æ–¥—ã
                            weather_icons = {
                                "–Ø—Å–Ω–æ": "‚òÄÔ∏è",
                                "–û–±–ª–∞—á–Ω–æ": "üå§Ô∏è",
                                "–ü–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
                                "–¢—É–º–∞–Ω": "üå´Ô∏è",
                                "–î–æ–∂–¥—å": "üåßÔ∏è",
                                "–ì—Ä–æ–∑–∞": "‚õàÔ∏è",
                                "–°–Ω–µ–≥": "‚ùÑÔ∏è",
                                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": "‚ùì"
                            }
                            
                            st.markdown(f"<h1 style='text-align: center;'>{weather_icons.get(row['weather_condition'], '‚ùì')}</h1>", unsafe_allow_html=True)
                            st.write(f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {row['humidity']:.1f}%")
                            st.write(f"–û—Å–∞–¥–∫–∏: {row['precipitation']:.1f} –º–º")
            else:
                st.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        else:
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

    # –í–∫–ª–∞–¥–∫–∞ –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏
    with tab3:
        st.header("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
        
        if 'last_training_metrics' in st.session_state and st.session_state['last_training_metrics']:
            metrics = st.session_state['last_training_metrics']
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            st.info(f"""
            ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
            
            **–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã:**
            - RMSE (Root Mean Squared Error) - –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏, –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.
            - MAE (Mean Absolute Error) - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
            
            –ß–µ–º –Ω–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –º–æ–¥–µ–ª—å.
            """)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫
            metrics_df = pd.DataFrame({
                '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–û—Å–∞–¥–∫–∏'],
                'RMSE': [
                    f"{metrics.get('temp_rmse', 0):.2f} ¬∞C", 
                    f"{metrics.get('humidity_rmse', 0):.2f} %", 
                    f"{metrics.get('precip_rmse', 0):.2f} –º–º"
                ],
                'MAE': [
                    f"{metrics.get('temp_mae', 0):.2f} ¬∞C", 
                    f"{metrics.get('humidity_mae', 0):.2f} %", 
                    f"{metrics.get('precip_mae', 0):.2f} –º–º"
                ],
                'R¬≤': [
                    f"{metrics.get('temp_r2', 0):.3f}", 
                    f"{metrics.get('humidity_r2', 0):.3f}", 
                    f"{metrics.get('precip_r2', 0):.3f}"
                ]
            })

            st.table(metrics_df)

            # –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é R¬≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            temp_r2 = metrics.get('temp_r2', 0)
            humidity_r2 = metrics.get('humidity_r2', 0)
            precip_r2 = metrics.get('precip_r2', 0)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è R¬≤
            def interpret_r2(r2_value):
                if r2_value >= 0.9:
                    return "–æ—Ç–ª–∏—á–Ω–æ–π"
                elif r2_value >= 0.7:
                    return "—Ö–æ—Ä–æ—à–µ–π"
                elif r2_value >= 0.5:
                    return "—Å—Ä–µ–¥–Ω–µ–π"
                elif r2_value >= 0.3:
                    return "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π"
                else:
                    return "–Ω–∏–∑–∫–æ–π"

            temp_r2_quality = interpret_r2(temp_r2)
            humidity_r2_quality = interpret_r2(humidity_r2)
            precip_r2_quality = interpret_r2(precip_r2)

            # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.write(f"""
            ### –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (R¬≤):

            R¬≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫—É—é –¥–æ–ª—é –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω—è–µ—Ç –º–æ–¥–µ–ª—å:
            - R¬≤ = 1.0: –º–æ–¥–µ–ª—å –∏–¥–µ–∞–ª—å–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
            - R¬≤ = 0.7: –º–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç 70% –≤–∞—Ä–∏–∞—Ü–∏–∏ (—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            - R¬≤ = 0.5: –º–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç 50% –≤–∞—Ä–∏–∞—Ü–∏–∏ (—Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            - R¬≤ < 0.3: –º–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç –º–µ–Ω–µ–µ 30% –≤–∞—Ä–∏–∞—Ü–∏–∏ (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)

            - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç **{temp_r2_quality}** –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é (R¬≤ = {temp_r2:.2f}).
            - –í–ª–∞–∂–Ω–æ—Å—Ç—å: –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç **{humidity_r2_quality}** –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é (R¬≤ = {humidity_r2:.2f}).
            - –û—Å–∞–¥–∫–∏: –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç **{precip_r2_quality}** –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é (R¬≤ = {precip_r2:.2f}).

            –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏, –≤–æ–∑–º–æ–∂–Ω–æ, 
            –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–µ—Ç—Ä–∞, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏.
            """)
            
            st.table(metrics_df)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
            metrics_fig = plot_model_metrics(metrics)
            if metrics_fig:
                st.plotly_chart(metrics_fig, use_container_width=True)
                
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            temp_rmse = metrics.get('temp_rmse', 0)
            humidity_rmse = metrics.get('humidity_rmse', 0)
            precip_rmse = metrics.get('precip_rmse', 0)
            
            temp_quality = "—Ö–æ—Ä–æ—à–µ–π" if temp_rmse < 2 else "—Å—Ä–µ–¥–Ω–µ–π" if temp_rmse < 4 else "–Ω–∏–∑–∫–æ–π"
            humidity_quality = "—Ö–æ—Ä–æ—à–µ–π" if humidity_rmse < 10 else "—Å—Ä–µ–¥–Ω–µ–π" if humidity_rmse < 20 else "–Ω–∏–∑–∫–æ–π"
            precip_quality = "—Ö–æ—Ä–æ—à–µ–π" if precip_rmse < 3 else "—Å—Ä–µ–¥–Ω–µ–π" if precip_rmse < 7 else "–Ω–∏–∑–∫–æ–π"
            
            st.write(f"""
            ### –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:
            
            - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç **{temp_quality}** —Ç–æ—á–Ω–æ—Å—Ç—å—é. –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ {metrics.get('temp_mae', 0):.2f}¬∞C.
            - –í–ª–∞–∂–Ω–æ—Å—Ç—å: –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç **{humidity_quality}** —Ç–æ—á–Ω–æ—Å—Ç—å—é. –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ {metrics.get('humidity_mae', 0):.2f}%.
            - –û—Å–∞–¥–∫–∏: –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç **{precip_quality}** —Ç–æ—á–Ω–æ—Å—Ç—å—é. –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ {metrics.get('precip_mae', 0):.2f} –º–º.
            
            –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
            """)
        else:
            st.info("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.")

    # –í–∫–ª–∞–¥–∫–∞ –ñ—É—Ä–Ω–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    with tab4:
        st.header("–ñ—É—Ä–Ω–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        logs = get_scraping_logs(selected_city, 20) if selected_city else []
        
        if logs:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
            logs_df = pd.DataFrame(logs)
            logs_df['created_at'] = pd.to_datetime(logs_df['created_at'])
            logs_df['start_date'] = pd.to_datetime(logs_df['start_date']).dt.date
            logs_df['end_date'] = pd.to_datetime(logs_df['end_date']).dt.date
            logs_df = logs_df.sort_values('created_at', ascending=False)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤
            st.dataframe(
                logs_df[['created_at', 'city', 'start_date', 'end_date', 'status', 'message']],
                column_config={
                    "created_at": "–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    "city": "–ì–æ—Ä–æ–¥",
                    "start_date": "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
                    "end_date": "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞",
                    "status": "–°—Ç–∞—Ç—É—Å",
                    "message": "–°–æ–æ–±—â–µ–Ω–∏–µ"
                },
                hide_index=True
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫—Ä–∞–ø–∏–Ω–≥—É
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            success_count = logs_df[logs_df['status'] == 'success'].shape[0]
            warning_count = logs_df[logs_df['status'] == 'warning'].shape[0]
            error_count = logs_df[logs_df['status'] == 'error'].shape[0]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ –º–µ—Ç—Ä–∏–∫
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", success_count)
            with col2:
                st.metric("–û–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏", warning_count)
            with col3:
                st.metric("–û—à–∏–±–æ–∫", error_count)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–±–æ—Ä–µ –ø–æ–≥–æ–¥—ã. –°–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏.")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    with st.expander("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"):
        st.write("""
        ### –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
        
        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ 
        –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
        
        **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
        - –°–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        - –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
        - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã
        
        –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
        - FastAPI –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
        - Streamlit –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        - SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        - Scikit-learn –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        - Beautiful Soup –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
        """)

if __name__ == "__main__":
    main()



